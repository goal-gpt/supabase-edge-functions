
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "moddatetime" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "vector" WITH SCHEMA "extensions";

CREATE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.profile (id, first_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'first_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

CREATE FUNCTION "public"."match_documents"("query_embedding" "extensions"."vector", "match_threshold" double precision, "match_count" integer) RETURNS TABLE("id" bigint, "content" integer, "raw_content" "text", "similarity" double precision, "link" "text", "title" "text")
    LANGUAGE "sql" STABLE
    AS $$
  select
    document.id,
    document.content,
    document.raw_content,
    1 - (document.embedding <=> query_embedding) as similarity,
    content.link,
    content.title
  from document
  join content on document.content = content.id
  where 1 - (document.embedding <=> query_embedding) > match_threshold
    and content.shareable is true
  order by similarity desc
  limit match_count;
$$;

ALTER FUNCTION "public"."match_documents"("query_embedding" "extensions"."vector", "match_threshold" double precision, "match_count" integer) OWNER TO "postgres";

CREATE FUNCTION "public"."update_chat_timestamp"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
   UPDATE public.chat SET updated_at = timezone('utc'::text, now())
   WHERE id = NEW.chat;
   RETURN NEW;
END;
$$;

ALTER FUNCTION "public"."update_chat_timestamp"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE "public"."chat" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "inserted_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."chat" OWNER TO "postgres";

ALTER TABLE "public"."chat" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."chat_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."chat_line" (
    "id" bigint NOT NULL,
    "chat" integer,
    "message" "text",
    "sender" "text",
    "inserted_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."chat_line" OWNER TO "postgres";

ALTER TABLE "public"."chat_line" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."chat_line_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."content" (
    "id" bigint NOT NULL,
    "link" "text" NOT NULL,
    "source" "text",
    "title" "text",
    "media_type" "text",
    "raw_content" "text",
    "shareable" boolean,
    "user_id" "uuid",
    "inserted_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."content" OWNER TO "postgres";

ALTER TABLE "public"."content" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."content_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."document" (
    "id" bigint NOT NULL,
    "content" integer,
    "embedding" "extensions"."vector",
    "inserted_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "raw_content" "text" NOT NULL
);

ALTER TABLE "public"."document" OWNER TO "postgres";

ALTER TABLE "public"."document" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."document_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."plan" (
    "id" bigint NOT NULL,
    "user_id" "uuid",
    "title" "text",
    "status" "text",
    "steps" "json",
    "inserted_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL
);

ALTER TABLE "public"."plan" OWNER TO "postgres";

ALTER TABLE "public"."plan" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."plan_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE "public"."profile" (
    "id" "uuid" NOT NULL,
    "username" "text",
    "first_name" "text",
    "last_name" "text",
    "avatar_url" "text",
    "email" "text",
    "background" "json",
    "inserted_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "updated_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);

ALTER TABLE "public"."profile" OWNER TO "postgres";

ALTER TABLE ONLY "public"."chat_line"
    ADD CONSTRAINT "chat_line_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."chat"
    ADD CONSTRAINT "chat_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."content"
    ADD CONSTRAINT "content_link_key" UNIQUE ("link");

ALTER TABLE ONLY "public"."content"
    ADD CONSTRAINT "content_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."document"
    ADD CONSTRAINT "document_content_key" UNIQUE ("content");

ALTER TABLE ONLY "public"."document"
    ADD CONSTRAINT "document_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."plan"
    ADD CONSTRAINT "plan_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");

CREATE TRIGGER "handle_updated_at" BEFORE UPDATE ON "public"."profile" FOR EACH ROW EXECUTE FUNCTION "extensions"."moddatetime"('updated_at');

CREATE TRIGGER "update_chat_after_insert_chat_line" AFTER INSERT ON "public"."chat_line" FOR EACH ROW EXECUTE FUNCTION "public"."update_chat_timestamp"();

ALTER TABLE ONLY "public"."chat_line"
    ADD CONSTRAINT "chat_line_chat_fkey" FOREIGN KEY ("chat") REFERENCES "public"."chat"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."chat"
    ADD CONSTRAINT "chat_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."content"
    ADD CONSTRAINT "content_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");

ALTER TABLE ONLY "public"."document"
    ADD CONSTRAINT "document_content_fkey" FOREIGN KEY ("content") REFERENCES "public"."content"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."plan"
    ADD CONSTRAINT "plan_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Enable read access for all users" ON "public"."content" FOR SELECT USING (true);

CREATE POLICY "Users can delete chat lines from their own chats." ON "public"."chat_line" FOR DELETE USING (("auth"."uid"() = ( SELECT "chat"."user_id"
   FROM "public"."chat"
  WHERE ("chat"."id" = "chat_line"."chat"))));

CREATE POLICY "Users can delete their own chats." ON "public"."chat" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can delete their own content." ON "public"."content" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can delete their own plans." ON "public"."plan" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can delete their own profile." ON "public"."profile" FOR DELETE USING (("auth"."uid"() = "id"));

CREATE POLICY "Users can insert chat lines to their own chats." ON "public"."chat_line" FOR INSERT WITH CHECK (("auth"."uid"() = ( SELECT "chat"."user_id"
   FROM "public"."chat"
  WHERE ("chat"."id" = "chat_line"."chat"))));

CREATE POLICY "Users can insert their own chats." ON "public"."chat" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert their own content." ON "public"."content" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert their own plans." ON "public"."plan" FOR INSERT WITH CHECK (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can insert their own profile." ON "public"."profile" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Users can select chat lines of their own chats." ON "public"."chat_line" FOR SELECT USING (("auth"."uid"() = ( SELECT "chat"."user_id"
   FROM "public"."chat"
  WHERE ("chat"."id" = "chat_line"."chat"))));

CREATE POLICY "Users can update chat lines of their own chats." ON "public"."chat_line" FOR UPDATE USING (("auth"."uid"() = ( SELECT "chat"."user_id"
   FROM "public"."chat"
  WHERE ("chat"."id" = "chat_line"."chat"))));

CREATE POLICY "Users can update their own chats." ON "public"."chat" FOR UPDATE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can update their own content." ON "public"."content" FOR UPDATE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can update their own plans." ON "public"."plan" FOR UPDATE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can update their own profile." ON "public"."profile" FOR UPDATE USING (("auth"."uid"() = "id"));

CREATE POLICY "Users can view a document if they can view the corresponding co" ON "public"."document" FOR SELECT USING (( SELECT (("auth"."uid"() = "content"."user_id") OR ("content"."shareable" = true))
   FROM "public"."content"
  WHERE ("content"."id" = "document"."content")));

CREATE POLICY "Users can view shareable content or their own content." ON "public"."content" FOR SELECT USING ((("shareable" = true) OR ("auth"."uid"() = "user_id")));

CREATE POLICY "Users can view their own chats." ON "public"."chat" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can view their own plans." ON "public"."plan" FOR SELECT USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Users can view their own profile." ON "public"."profile" FOR SELECT USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."chat" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."chat_line" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."content" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."document" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."plan" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON FUNCTION "public"."update_chat_timestamp"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_chat_timestamp"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_chat_timestamp"() TO "service_role";

GRANT ALL ON TABLE "public"."chat" TO "anon";
GRANT ALL ON TABLE "public"."chat" TO "authenticated";
GRANT ALL ON TABLE "public"."chat" TO "service_role";

GRANT ALL ON SEQUENCE "public"."chat_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."chat_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."chat_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."chat_line" TO "anon";
GRANT ALL ON TABLE "public"."chat_line" TO "authenticated";
GRANT ALL ON TABLE "public"."chat_line" TO "service_role";

GRANT ALL ON SEQUENCE "public"."chat_line_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."chat_line_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."chat_line_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."content" TO "anon";
GRANT ALL ON TABLE "public"."content" TO "authenticated";
GRANT ALL ON TABLE "public"."content" TO "service_role";

GRANT ALL ON SEQUENCE "public"."content_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."content_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."content_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."document" TO "anon";
GRANT ALL ON TABLE "public"."document" TO "authenticated";
GRANT ALL ON TABLE "public"."document" TO "service_role";

GRANT ALL ON SEQUENCE "public"."document_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."document_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."document_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."plan" TO "anon";
GRANT ALL ON TABLE "public"."plan" TO "authenticated";
GRANT ALL ON TABLE "public"."plan" TO "service_role";

GRANT ALL ON SEQUENCE "public"."plan_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."plan_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."plan_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
